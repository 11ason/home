<!DOCTYPE html>
<html lang="en">
<head>
    <script defer data-domain="11ason.space" src="https://plausible.io/js/script.js"></script>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hi there</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            position: relative;
        }

        canvas {
            display: block;
            position: absolute;
            top: 0;
            left: 0;
        }

        .content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #f5e09e;
            font-family: Arial, sans-serif;
            text-align: center;
            font-size: calc(22px + 2vw); /* Responsive font size */
            white-space: nowrap;
        }

        .cursor {
            display: inline-block;
            width: 8px;
            height: 1em; /* Use em for font-size consistency */
            background-color: #f5e09e;
            vertical-align: middle;
            margin-left: 2px;
            animation: blink 1s infinite;
        }

        .subtext {
            color: #998959;
            font-size: calc(5px + 0.5vw);
            margin-top: 0px;
        }

        @keyframes blink {
            0% { opacity: 1; }
            50% { opacity: 0; }
            100% { opacity: 1; }
        }

        .footer {
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            color: #f5e09e;
            font-family: Arial, sans-serif;
            font-size: 14px;
        }

        a {
            color: inherit; /* Make the link color the same as the text color */
            text-decoration: none; /* Remove underline */
        }
    </style>
</head>
<body>
    <canvas id="starCanvas"></canvas>
    <div class="content">
        <a href="https://11ason.space">
            <span id="text"></span><span class="cursor"></span>
            <div class="subtext">(click text to continue)</div>
        </a>
    </div>
    <div class="footer">Made with &lt;3 by Mason Matchett</div>

    <script>
        const canvas = document.getElementById('starCanvas');
        const ctx = canvas.getContext('2d');

        let stars = [];
        const numStarsBase = 900;
        let shootingStars = [];
        const shootingStarProbability = 0.01;
        let time = 0;

        // Resize canvas to fill screen
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            adjustStarDensity();
        }

        function adjustStarDensity() {
            // Adjust the number of stars based on screen size
            const numStars = window.innerWidth < 600 ? numStarsBase / 2 : numStarsBase;
            createStars(numStars);
        }

        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        // Create stars
        function createStars(numStars) {
            stars = [];
            for (let i = 0; i < numStars; i++) {
                stars.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    radius: Math.random() * 1.5,
                    vx: (Math.random() - 0.5) * 1,
                    vy: (Math.random() - 0.5) * 1,
                    amplitude: Math.random() * 50 + 50,
                    frequency: Math.random() * 0.02 + 0.001,
                    phase: Math.random() * Math.PI * 2
                });
            }
        }
        createStars(numStarsBase);

        // Create shooting star
        function createShootingStar() {
            const startX = Math.random() * canvas.width;
            const startY = Math.random() * canvas.height / 2;
            const length = Math.random() * 300 + 100;
            const angle = Math.PI / 4;

            shootingStars.push({
                x: startX,
                y: startY,
                length: length,
                vx: Math.cos(angle) * 8,
                vy: Math.sin(angle) * 8,
                opacity: 1,
                life: 0,
                maxLife: 100
            });
        }

        // Animate stars and shooting stars
        function animate() {
            ctx.fillStyle = 'rgba(11, 11, 11, 0.6)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#f5e09e';

            // Draw background stars with curved paths
            for (let i = 0; i < stars.length; i++) {
                const star = stars[i];
                const x = star.x + Math.sin(time * star.frequency + star.phase) * star.amplitude;
                const y = star.y + Math.cos(time * star.frequency + star.phase) * star.amplitude;

                ctx.beginPath();
                ctx.arc(x, y, star.radius, 0, Math.PI * 2);
                ctx.fill();

                star.x += star.vx;
                star.y += star.vy;

                if (star.x < 0) star.x = canvas.width;
                if (star.x > canvas.width) star.x = 0;
                if (star.y < 0) star.y = canvas.height;
                if (star.y > canvas.height) star.y = 0;
            }

            time += 0.1;

            if (Math.random() < shootingStarProbability) {
                createShootingStar();
            }

            // Draw shooting stars
            for (let i = 0; i < shootingStars.length; i++) {
                const shootingStar = shootingStars[i];
                ctx.strokeStyle = `rgba(245, 224, 158, ${shootingStar.opacity})`;
                ctx.lineWidth = 2;
                ctx.beginPath();
                ctx.moveTo(shootingStar.x, shootingStar.y);
                ctx.lineTo(
                    shootingStar.x - shootingStar.length * shootingStar.vx / 8,
                    shootingStar.y - shootingStar.length * shootingStar.vy / 8
                );
                ctx.stroke();

                shootingStar.x += shootingStar.vx;
                shootingStar.y += shootingStar.vy;
                shootingStar.life++;
                shootingStar.opacity -= 0.02;

                if (shootingStar.life >= shootingStar.maxLife || shootingStar.opacity <= 0) {
                    shootingStars.splice(i, 1);
                    i--;
                }
            }

            requestAnimationFrame(animate);
        }
        animate();

        // Text animation
        const greetings = ["Hi", "Hello", "Hello, World", "Hey", "Bonjour", "Welcome", "Howdy", "Evening", "Morning", "What's up?", "Hello Stranger", "Hi There", "Heyyyy", "Hellooo", "Nice to meet you", "Hii", "Cheers", "How's the weather?"];
        let currentText = "";
        let letterIndex = 0;
        let greetingIndex = 0;
        let deleting = false;
        const typingSpeed = 100;
        const deletingSpeed = 50;
        const delayBetweenWords = 2500;

        function typeText() {
            const targetText = greetings[greetingIndex];

            if (!deleting && letterIndex < targetText.length) {
                currentText += targetText.charAt(letterIndex);
                letterIndex++;
                setTimeout(typeText, typingSpeed);
            } else if (deleting && letterIndex > 0) {
                currentText = currentText.slice(0, -1);
                letterIndex--;
                setTimeout(typeText, deletingSpeed);
            } else if (!deleting && letterIndex === targetText.length) {
                deleting = true;
                setTimeout(typeText, delayBetweenWords);
            } else if (deleting && letterIndex === 0) {
                deleting = false;
                greetingIndex = (greetingIndex + 1) % greetings.length;
                setTimeout(typeText, typingSpeed);
            }

            document.getElementById("text").innerHTML = currentText;
        }
        typeText();
    </script>
</body>
</html>
